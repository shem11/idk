<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Folder Upload Dashboard</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
    </style>
</head>
<body>
    <h1>Folder Upload Dashboard</h1>
    <p>Select a folder of .txt files: <input type="file" id="folderInput" webkitdirectory multiple></p>
    <div id="dashboard"></div>

    <script>
        const folderInput = document.getElementById('folderInput');
        const dashboard = document.getElementById('dashboard');

        // Helper function to send files to the server
        async function uploadFiles(files) {
            const formData = new FormData();
            for (let file of files) {
                if (file.name.endsWith('.txt')) {
                    formData.append('files', file);
                }
            }

            try {
                const response = await fetch('http://127.0.0.1:5000/upload', {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) throw new Error(`HTTP error: ${response.status}`);

                const data = await response.json();
                renderChart(data); // Visualize the data
            } catch (error) {
                console.error('Error uploading files:', error);
            }
        }

        // Handle folder input
        folderInput.addEventListener('change', (e) => {
            const files = e.target.files;
            uploadFiles(files); // Send the selected files
        });

        // Render a sample chart using D3.js
        function renderChart(data) {
            dashboard.innerHTML = ''; // Clear previous charts

            const width = 600;
            const height = 400;
            const svg = d3.select('#dashboard')
                .append('svg')
                .attr('width', width)
                .attr('height', height);

            // Example: Render bar chart for anomalies
            const anomalyCounts = d3.rollup(data, v => v.length, d => d.anomaly);

            const xScale = d3.scaleBand()
                .domain([...anomalyCounts.keys()])
                .range([0, width])
                .padding(0.1);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(anomalyCounts.values())])
                .range([height, 0]);

            svg.selectAll('rect')
                .data([...anomalyCounts.entries()])
                .enter()
                .append('rect')
                .attr('x', d => xScale(d[0]))
                .attr('y', d => yScale(d[1]))
                .attr('width', xScale.bandwidth())
                .attr('height', d => height - yScale(d[1]))
                .attr('fill', 'steelblue');

            svg.append('g')
                .attr('transform', `translate(0,${height})`)
                .call(d3.axisBottom(xScale).tickFormat(d => d ? "Anomaly" : "Normal"));

            svg.append('g').call(d3.axisLeft(yScale));
        }
    </script>
</body>
</html>
